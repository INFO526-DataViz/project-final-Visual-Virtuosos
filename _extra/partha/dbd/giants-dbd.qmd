---
title: The Last Giants
author: Visual Virtuosos
format: dashboard
theme: yeti
---

```{r}
#| label: load-pkgs
#| message: false

suppressWarnings(library(tidyverse))

if (!require("pacman")) 
  install.packages("pacman")

pacman::p_load(knitr,
               tidyverse,
               lubridate,
               here,
               dplyr,
               here,
               ggplot2,
               ggmap,
               maps,
               rnaturalearth,
               rnaturalearthdata,
               sf,
               plotly,
               magick,
               listviewer,
               shiny,
               gganimate,
               gifski,
               shiny,
               shinydashboard,
               imager)
```



```{r}
## Dataset Setup

elephant <- readxl::read_xlsx(here("data","elephant_data.xlsx"))
```


```{r}
## Plots

# Load the Africa countries dataset
africa <- ne_countries(scale = "medium", continent = "Africa", returnclass = "sf")

```




```{r}

## Data Warangling

library(dplyr)
# Select the columns of interest (e.g., country and estimate)

elephant_data <- elephant |>
  select(Country,Ecosystem,Estimate,Year)

elephant_data_1995 <- elephant %>%
  filter(Year == 1995) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_1996 <- elephant %>%
  filter(Year == 1996) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_1998 <- elephant %>%
  filter(Year == 1998) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_1999 <- elephant %>%
  filter(Year == 1999) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_2000 <- elephant %>%
  filter(Year == 2000) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_2001 <- elephant %>%
  filter(Year == 2001) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_2002 <- elephant %>%
  filter(Year == 2002) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_2004 <- elephant %>%
  filter(Year == 2004) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_2005 <- elephant %>%
  filter(Year == 2005) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2006 <- elephant %>%
  filter(Year == 2006) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2007 <- elephant %>%
  filter(Year == 2007) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2008 <- elephant %>%
  filter(Year == 2008) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2009 <- elephant %>%
  filter(Year == 2009) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2010 <- elephant %>%
  filter(Year == 2010) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2014 <- elephant %>%
  filter(Year == 2014) %>%
  select(Country,Ecosystem, Estimate, Year)
```




```{r}

### Africa plots

# Load the necessary libraries
library(rnaturalearth)
library(ggplot2)

# Load the elephant population data (replace this with your own data)
# Assuming you have a data frame named 'elephant_data' with 'Country', 'Estimate' columns

# Merge the elephant data with natural earth data to get the country shapes
world <- ne_countries(scale = "medium", returnclass = "sf")

# Create a ggplot map
elephant_map_1995 <- merge(world, elephant_data_1995, by.x = "name", by.y = "Country")

# Create a ggplot map
map1 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_1995, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_minimal() +
  labs(title = "Elephant Population Estimates in Africa in 1995")
```
# Page1 {orientation="columns"}

## Column {width="40%"}

```{r}
#| title: "Map1"
map1
```







```{r}
# #| title: Population Estimates in Africa
# 
# library(rnaturalearth)
# library(ggplot2)
# library(plotly)
# library(ggiraph)
# library(ggshadow)
# 
# library(raster)
# library(rayshader)
# library(rgl)
# 
# africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
# cnt <- ne_countries(scale = "medium", returnclass = "sf", country = "sudan")
# cnt2 <- ne_countries(scale = "medium", returnclass = "sf", country = "senegal")
# col1 <- c("Angola", "Botswana", "Cameroon", "Chad", "Congo", "Kenya","Malawi",
#           "Mali", "Mozambique", "South Africa", "Tanzania","Uganda", "Zambia", "Zimbabwe")
# col2 <- c(20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20)
# 
# eco <- data.frame(col1,col2)
# 
# eco2 <- merge(africa, eco, by.x = "name", by.y = "col1")
# 
# 
# #africa
# gg_map <- ggplot() +
#   geom_sf(data = africa, fill = "gray85", color = "white", linewidth = 0.9 ) +
#   geom_sf(data= eco2, aes(fill = col2), color = "white", linewidth = 0.9)+
#   theme_void()+
#   theme(
#     plot.background = element_rect(
#       fill = "white",
#       colour = "white"
#     ),
#     legend.position = "none")
# 
# #gg_map
# 
# map3d <- plot_gg(gg_map,
#                  multicore=TRUE,
#                  width=5,
#                  height=5,
#                  scale = 350,
#                  windowsize = c(1000, 1000),
#                  phi = 30,
#                  save_height_matrix = TRUE,
#                  theta = 0,
#                  flat_transparent_bg = TRUE,
#                  invert = FALSE
# )
# render_label(map3d, text = "Northern Territory", x = 200, y = 100, z =250)
# rgl::rglwidget()


```




## Column

<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body {font-family: Arial;}

/* Style the tab */
.tab {
  overflow: hidden;
  border: 1px solid #ccc;
  background-color: #f1f1f1;
}

/* Style the buttons inside the tab */
.tab button {
  background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 14px 16px;
  transition: 0.3s;
  font-size: 17px;
}

/* Change background color of buttons on hover */
.tab button:hover {
  background-color: #ddd;
}

/* Create an active/current tablink class */
.tab button.active {
  background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
  display: none;
  padding: 6px 12px;
  border: 1px solid #ccc;
  border-top: none;
}
</style>
</head>
<body>

<h2>Top 5 largest Ecosystems</h2>

<div class="tab">
  <button class="tablinks" onclick="openCity(event, 'Tanzania')">Tanzania</button>
  <button class="tablinks" onclick="openCity(event, 'Botswana')">Botswana</button>
  <button class="tablinks" onclick="openCity(event, 'Mozambique')">Mozambique</button>
  <button class="tablinks" onclick="openCity(event, 'Kenya')">Kenya</button>
  <button class="tablinks" onclick="openCity(event, 'Zambia')">Zambia</button>
  <button class="tablinks" onclick="openCity(event, 'Zimbabwe')">Zimbabwe</button>
  <button class="tablinks" onclick="openCity(event, 'Angola')">Angola</button>
  <button class="tablinks" onclick="openCity(event, 'Cameroon')">Cameroon</button>
  <button class="tablinks" onclick="openCity(event, 'South Africa')">South Africa</button>
  <button class="tablinks" onclick="openCity(event, 'Uganda')">Uganda</button>
  <button class="tablinks" onclick="openCity(event, 'Chad')">Chad</button>
  <button class="tablinks" onclick="openCity(event, 'Congo')">Congo</button>
  <button class="tablinks" onclick="openCity(event, 'Mali')">Mali</button>
  <button class="tablinks" onclick="openCity(event, 'Malawi')">Malawi</button>
</div>

<div id="Tanzania" class="tabcontent">
  <h5>Savannah Elephant Ecosystems in Tanzania</h5>
  
  <p> 
  <ul>
  <li>Names of ecosystems - Burigi-Biharamulo, Katavi-Rukwa, Malagarasi-Muyovosi, Ruaha-Rungwa, Selous-Mikumi, Serengeti, Tarangire-Manyara</li>
  <li>Total Ecosystem area (km2) = 268,250</li>
  </ul>
  </p>
  <figure>
  <img src="tan1.png" alt="tan1" style="width:40%">
  <figcaption>Fig. Burigi-Biharamulo, Tanzania</figcaption>
  </figure>
  
</div>



<div id="Botswana" class="tabcontent">
  <h5>Savannah Elephant Ecosystems in Botswana</h5>
  
  <p> 
  <ul>
  <li>Names of ecosystems - Northern Botswana, Tuli
</li>
  <li>Total Ecosystem area (km2) = 101,599
</li>
  </ul>
  </p>
  <figure>
  <img src="bots1.jpg" alt="bots1" style="width:40%">
  <figcaption>Fig. Tuli, Botswana</figcaption>
  </figure>
  
</div>



<div id="Mozambique" class="tabcontent">
  <h5>Savannah Elephant Ecosystems in Mozambique</h5>
  
  <p> 
  <ul>
  <li>Names of ecosystems - Limpopo NP, Marromeo Buffalo R, Niassa NR, Quirimbas NP, Tete Province / Magoe
</li>
  <li>Total Ecosystem area (km2) = 101,077

</li>
  </ul>
  </p>
  <figure>
  <img src="mozam1.jpg" alt="mozam1" style="width:20%">
  <figcaption>Fig. Limpopo NP, Mozambique</figcaption>
  </figure>
  
</div>



<div id="Kenya" class="tabcontent">
  <h5>Savannah Elephant Ecosystems in Kenya</h5>
  
  <p> 
  <ul>
  <li>Names of ecosystems - Laikipia-Samburu, Masai Mara, Tsavo-Amboseli
</li>
  <li>Total Ecosystem area (km2) = 85,711
</li>
  </ul>
  </p>
  <figure>
  <img src="kenya1.jpg" alt="kenya1" style="width:40%">
  <figcaption>Fig. Masai Mara, Kenya</figcaption>
  </figure>
  
</div>


<div id="Zambia" class="tabcontent">
  <h5>Savannah Elephant Ecosystems in Zambia</h5>
  
  <p> 
  <ul>
  <li>Names of ecosystems - Luangwa, West Zambezi
</li>
  <li>Total Ecosystem area (km2) = 84,814
</li>
  </ul>
  </p>
  <figure>
  <img src="zambia1.jpg" alt="zambia1" style="width:40%">
  <figcaption>Fig. Masai Mara, Zambia</figcaption>
  </figure>
  
</div>


<script>
function openCity(evt, cityName) {
  var i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById(cityName).style.display = "block";
  evt.currentTarget.className += " active";
}
</script>
   
</body>
</html> 

# Page 2


# Page 3 {orientation="columns"}



```{r}

ivory_exports_data <- read_csv(here("data","cites_ivory_export.csv"))
```








## Column {width="55%"}

```{r}

# Count the number of instances for each year
export_count_per_year <- ivory_exports_data |>
  group_by(Year) |>
  summarise(export_count = n())

# Assuming `count_per_year` is your dataset
export_count_per_year <- export_count_per_year |>
  filter(Year > 2000)

#export_count_per_year

# Assuming `exports_barplot` is your ggplot bar plot
library(plotly)

# Add text to ggplot for hover information
exports_barplot <- ggplot(export_count_per_year, aes(x = as.factor(Year), y = export_count, fill = as.factor(Year), text = paste("Export count: ", export_count))) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_viridis_d(option = "C") +
  labs(
    x = "Year",
    y = "Number of exports",
    title = "Ivory exports in Africa from 1990 to 2022",
    caption = "Source: CITES (Convention of International Trade in Endangered Species of Wild Fauna and Flora)"
  ) +
  guides(fill = FALSE) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

# Convert ggplot to plotly
exports_plotly <- ggplotly(exports_barplot, tooltip = "text")

# # Display the interactive plot
exports_plotly
```

### Row {height="60%"}


### Row {height="40%"}

```{r warning = FALSE,message=FALSE}

library(rcartocolor)

ivory_term_count <- ivory_exports_data |>
  group_by(Year,Term) |>
  summarise(instance_count = n()) |>
  ungroup()

ivory_term_count <- ivory_term_count %>%
  mutate(Term = fct_reorder(Term, instance_count, .desc = TRUE))

carving_ggplot <- ivory_term_count |>
  ggplot(aes( y = fct_rev(Term), size = instance_count, fill = Term)) +
  geom_bar(alpha = 0.7, color = "black") +
  scale_size(range = c(1.4, 10), name = "Population (M)") +
  scale_fill_carto_d(palette = "Safe") +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(
    x = "Count",
    y = "Export Type",
    title = "Type of ivory export",
    caption = "Source: CITES (Convention of International Trade 
    in Endangered Species of Wild Fauna and Flora)"
  )


# converting ggplot to plotly
carvings_plotly <- ggplotly(carving_ggplot, tooltip = "text")

# # display the interactive plot
carvings_plotly
```


## Column {width="45%"}

```{r, fig.width=40, fig.height=100}

# Assuming `ivory_exports_data` is your dataset
country_export_count <- ivory_exports_data %>%
  filter(Exporter %in% c("ZW", "ZM", "ZA", "BW", "MZ")) %>%
  group_by(Exporter) %>%
  summarise(count = n()) %>%
  mutate(Country = case_when(
    Exporter == "ZW" ~ "Zimbabwe",
    Exporter == "ZM" ~ "Zambia",
    Exporter == "ZA" ~ "South Africa",
    Exporter == "BW" ~ "Botswana",
    Exporter == "MZ" ~ "Mozambique",
    TRUE ~ as.character(Exporter)
  ))

africa <- ne_countries(scale = "medium", continent = "Africa", returnclass = "sf")

export_country_map <- merge(africa, country_export_count, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_export_countries <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = export_country_map, aes(fill = count, text = paste("Country: ", country_export_count$Country,"<br>",
                                                                    "Export count: ",count )), color = "#5D2606", size = 0.2) +
  scale_fill_gradient(low = "#F2A64F", high = "#B61210") +
  theme_void() +
  labs(title = "Ivory exports from 1995 to 2022 for biggest Elephant ecosystems")

# Convert ggplot to plotly
gg_export_countries_plotly <- ggplotly(gg_export_countries, tooltip = "text")

# Show the Plotly map
gg_export_countries_plotly
```

