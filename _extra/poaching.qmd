## Poaching plots

```{r}

if (!require("pacman")) 
  install.packages("pacman")

pacman::p_load(knitr,tidyverse,lubridate,here,dplyr,ggplot2,ggmap,maps,rnaturalearth,rnaturalearthdata,sf,plotly,caret,glmnet,steamgraph)
```

```{r}

poaching_seizure <- read_csv(here("data", "poaching_data.csv"), skip = 1)
poaching_seizure
```

```{r}

ivory_exports_data <- read_csv(here("data","cites_ivory_export.csv"))
ivory_exports_data
```

## BAR plot

```{r}

# Assuming 'cites_ivory_data' is your dataset
# You can use the 'dplyr' package for data manipulation
library(dplyr)

# Count the number of instances for each year
export_count_per_year <- ivory_exports_data |>
  group_by(Year) |>
  summarise(export_count = n())

# Assuming `count_per_year` is your dataset
export_count_per_year <- export_count_per_year |>
  filter(Year > 2000)

export_count_per_year

# Create a bar plot
ggplot(export_count_per_year, aes(x = as.factor(Year), y = export_count)) +
  geom_bar(stat = "identity", fill = "grey", color = "black") +
  scale_color_viridis_() +
  labs(
    x = "Year",
    y = "Number of exports",
    title = "Ivory exports in Africa from 1990 to 2022",
    caption = "Source: CITES (Convention of International Trade 
    in Endangered Species of Wild Fauna and Flora)"
  ) +
  theme_minimal()
```

## Bubble plot

```{r}

library(ggplot2)
library(plotly)
library(viridis)
library(dplyr)

bubble_plot_data <- ivory_exports_data %>%
  group_by(Year) %>%
  summarise(export_count = n())

bubble_plot <- bubble_plot_data %>%
  ggplot(aes(x = Year, y = export_count, size = export_count, text = paste("Year: ", Year, "<br>Export Count: ", export_count))) +
  geom_point(alpha = 0.7) +
  scale_size(range = c(1.4, 10), name = "Population (M)") +
  scale_color_viridis(discrete = TRUE, guide = FALSE) +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(
    x = "Year",
    y = "Export count",
    title = "Ivory exports in Africa from 1990 to 2022"
  )

# Turn ggplot interactive with plotly
bubble_plotly <- ggplotly(bubble_plot, tooltip = "text")
bubble_plotly

```

## Stream Graph for Term ( Ivory carvings etc) 

```{r}

library(streamgraph)
library(viridis)

ivory_term_count <- ivory_exports_data |>
  group_by(Year,Term) |>
  summarise(instance_count = n())

# Create a stream graph with color-blind-friendly colors
streamgraph_plot <- streamgraph(ivory_term_count, key = "Term", value = "instance_count", date = "Year", height = "300px", width = "1000px")

streamgraph_plot
```

```{r}

# Create a lollipop plot
ivory_term_count |>
  ggplot(aes(x = Term, y = instance_count)) +
  geom_segment(aes(xend = Term, yend = 0), color = "black") +
  #geom_point(size = 3, color = "black") +  # Add points at the end of the segments
  theme_minimal() +
  labs(title = "Lollipop Plot of ivory_term_count",
       x = "Term",
       y = "Year") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.y = element_line(color = "gray", linetype = "dashed"),
        panel.grid.minor.y = element_blank())


```

a

```{r warning = FALSE, message=FALSE}


ivory_term_count <- ivory_exdatas_data |>
  group_by(Year,Term) |>
  summarise(instance_count = n())

ivory_term_count |>
  ggplot(aes( y = Term, size = instance_count)) +
  geom_bar(alpha = 0.7) +

data
  scale_size(range = c(1.4, 10), name = "Population (M)") +
  #scale_color_viridis(discrete = TRUE, guide = FALSE) +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(
    x = "Count",
    y = "Export Type",
    title = "Type of ivory export",
    caption = "Source: CITES (Convention of International Trade 
    in Endangered Species of Wild Fauna and Flora)"
  )
```
