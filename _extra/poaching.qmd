## Poaching plots

```{r}

if (!require("pacman")) 
  install.packages("pacman")

pacman::p_load(knitr,tidyverse,lubridate,here,dplyr,ggplot2,ggmap,maps,rnaturalearth,rnaturalearthdata,sf,plotly,caret,glmnet,steamgraph)
```

```{r}

poaching_seizure <- read_csv(here("data", "poaching_data.csv"), skip = 1)
poaching_seizure
```

```{r}

ivory_exports_data <- read_csv(here("data","cites_ivory_export.csv"))
ivory_exports_data
```

## BAR plot

```{r}

# Assuming 'cites_ivory_data' is your dataset
# You can use the 'dplyr' package for data manipulation
library(dplyr)

# Count the number of instances for each year
export_count_per_year <- ivory_exports_data |>
  group_by(Year) |>
  summarise(instance_count = n())

# Assuming `count_per_year` is your dataset
export_count_per_year <- export_count_per_year |>
  filter(Year > 2000)

export_count_per_year

# Create a bar plot
ggplot(export_count_per_year, aes(x = as.factor(Year), y = instance_count)) +
  geom_bar(stat = "identity", fill = "grey", color = "black") +
  labs(
    x = "Year",
    y = "Number of instances",
    title = "Ivory exports in Africa from 1990 to 2022",
    caption = "Source: CITES (Convention of International Trade 
    in Endangered Species of Wild Fauna and Flora)"
  ) +
  theme_minimal()
```

```{r}

ivory_data_exports|>
  filter(Exporter == "ZW") |>
  ggplot(aes(y = Term)) +
  geom_bar()
```

```{r}

library(ggplot2)
library(dplyr)
library(plotly)
library(viridis)
library(hrbrthemes)

# The dataset is provided in the gapminder library
library(gapminder)

 ivory_term_count <- ivory_exports_data |>
  group_by(Year) |>
  summarise(instance_count = n())

  # Classic ggplot
p<-ivory_term_count |>
  ggplot( aes(x=Year, y= instance_count, size = instance_count)) +
    geom_point(alpha=0.7) +
    scale_size(range = c(1.4, 19), name="Population (M)") +
    scale_color_viridis(discrete=TRUE, guide=FALSE) +
    theme_ipsum() +
    theme(legend.position="none")

# turn ggplot interactive with plotly
pp <- ggplotly(p)
pp
```

```{r}

library(streamgraph)
library(viridis)

# Create a stream graph with color-blind-friendly colors
pp <- streamgraph(ivory_term_count, key = "Term", value = "instance_count", date = "Year", height = "300px", width = "1000px") %>%
  sg_legend(show = TRUE, label = "names: ")

pp
```

```{r}

```
