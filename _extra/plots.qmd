## SETUP

```{r}

if (!require("pacman")) 
  install.packages("pacman")

pacman::p_load(knitr,tidyverse,lubridate,here,dplyr,ggplot2,ggmap,maps,rnaturalearth,rnaturalearthdata,sf,plotly,caret,glmnet,steamgraph)
```

```{r}

ivory_exports_data <- read_csv(here("data","cites_ivory_export.csv"))
elephant <- readxl::read_xlsx(here("data","elephant_data.xlsx"))
```

```{r}


export_count_per_year <- export_count_per_year |>
  filter(Year > 2000)

# Create a ggplot bar plot
gg <- ggplot(export_count_per_year, aes(x = as.factor(Year), y = export_count, text = paste("Year: ", Year, "<br>Export count: ", export_count))) +
  geom_bar(stat = "identity") +
  labs(
    x = "Year",
    y = "Number of exports",
    title = "Ivory exports in Africa from 1990 to 2022",
    caption = "Source: CITES (Convention of International Trade in Endangered Species of Wild Fauna and Flora)"
  ) +
  theme_minimal()

# Convert ggplot to plotly
export_bar_plot <- ggplotly(gg)

# Display the interactive plot
export_bar_plot

```

## QUESTION 1 

## Prediction plot

## Total population adding

```{r}

# Group by Year and calculate the total Estimate for each year
total_estimate_per_year <- elephant %>%
  group_by(Year) %>%
  summarise(Total_Estimate = sum(Estimate))

total_estimate_per_year <- total_estimate_per_year %>%
  filter(Year != 2015)

# Print the new dataset
print(total_estimate_per_year)
```

### Fitting a linear plot

```{r}

# Fitting a linear regression model
lm_model <- lm(Estimate ~ Year, data = elephant)

# Summary of the model
summary(lm_model)
```

## OLS 

```{r}

# Define the recipe
ols_recipe <- recipe(Total_Estimate ~ Year, data = total_estimate_per_year) %>%
  step_center(Year, all_predictors()) %>%
  step_scale(Year, all_predictors())

# Define the linear regression model
ols_model <- linear_reg() %>%
  set_engine("lm")

# Combine recipe and model into a workflow
ols_workflow <- workflow() %>%
  add_recipe(ols_recipe) %>%
  add_model(ols_model)

# Train the OLS model
ols_fit <- ols_workflow %>% fit(data = total_estimate_per_year)

# Create a new data frame for prediction (years 2015-2023)
new_years <- data.frame(Year = 2015:2023)

# Make predictions using the trained OLS model
ols_predictions <- predict(ols_fit, new_data = new_years)

# Combine the new years and predictions
ols_predictions_data <- data.frame(Year = new_years$Year, Total_Estimate = ols_predictions$.pred)

# Print the OLS predictions
ols_predictions_data
```

```{r}

# Assuming 'elephant_data' is your dataset with columns 'Year' and 'Estimate'
library(caret)

# Specify the training control
train_control <- trainControl(method = "cv", number = 5)

# Train the OLS model using cross-validation
ols_model <- train(Total_Estimate ~ Year, data = total_estimate_per_year, method = "lm", trControl = train_control)

# Print cross-validated RMSE for each model
print("OLS Model Cross-Validated RMSE:")
print(sqrt(ols_model$results$RMSE))
```

## Plot 1 -- Trend in population

```{r warning=FALSE, message=FALSE}

p <- ggplot(combined_data, aes(x = Year, y = Total_Estimate, group = 1)) +
  geom_line(aes(color = ifelse(Year <= 2014, "Blue", "Red"))) +
  stat_smooth(method = "loess", se = FALSE) +
  ggtitle("Combined Data: Estimate Over Time") +
  xlab("Year") +
  ylab("Estimate") +
  scale_y_continuous(limits = c(0, 500000), expand = c(0, 0), labels = comma_format(scale = 1e-3)) +
  scale_color_manual(values = c("black", "red3"), guide = FALSE) +
  labs(
    x = "Year",
    y = "Estimate (in Thousands)",
    title = "Trend in Elephant Population from 1995-2015",
    caption = "Source: PeerJ PeerJ Article
doi: 10.7717/peerj.2354 "
  ) +
  theme_minimal()

# Convert ggplot to plotly
prediction_plot <- ggplotly(p)

# Display the interactive plot
prediction_plot
```

```{r}

```

```{r}

```

```{r}

```
