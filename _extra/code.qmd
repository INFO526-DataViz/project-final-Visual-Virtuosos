```{r , warning=FALSE}
#| label: load-pkgs
#| message: false

suppressWarnings(library(tidyverse))

if (!require("pacman")) 
  install.packages("pacman")

pacman::p_load(knitr,tidyverse,lubridate,here,dplyr,ggplot2,ggmap,maps,rnaturalearth,rnaturalearthdata,sf,plotly,magick,listviewer,shiny,gganimate,gifski,shiny,shinydashboard,imager,htmltools)
```

## Dataset Setup

```{r}

elephant <- readxl::read_xlsx(here("data","elephant_data.xlsx"))
```

## Plots

```{r}

# Load the Africa countries dataset
africa <- ne_countries(scale = "medium", continent = "Africa", returnclass = "sf")
View(africa)
```

```{r}

# Load the required libraries
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(gganimate)

# Load the Africa countries dataset
africa <- ne_countries(scale = "medium", continent = "Africa", returnclass = "sf")

# Create a sample dataset with elephant estimates by ISO country code
elephant_data <- data.frame(
  iso_a3 = c("KEN", "TZA", "UGA", "ZAF", "MOZ"),  # ISO country codes
  elephants = c(3000, 5000, 1500, 2000, 4000)  # Estimated elephant populations
)


# Match the elephant data to the countries in the Africa dataset
africa$elephants <- NA  # Create a new column for the elephant estimates
africa$elephants[africa$sovereignt %in% elephant$Country] <- elephant$Estimate

# Create the map
ggplot(africa) +
  geom_sf(aes(fill = elephants)) +
  scale_fill_gradient(low = "lightblue", high = "darkgreen") +
  labs(title = "Elephant Estimates in African Countries") +
  transition_states() +
  theme_minimal()
```

## Data Warangling

```{r}


library(dplyr)
# Select the columns of interest (e.g., country and estimate)

elephant_data <- elephant |>
  select(Country,Ecosystem,Estimate,Year)

elephant_data_1995 <- elephant %>%
  filter(Year == 1995) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_1996 <- elephant %>%
  filter(Year == 1996) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_1998 <- elephant %>%
  filter(Year == 1998) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_1999 <- elephant %>%
  filter(Year == 1999) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_2000 <- elephant %>%
  filter(Year == 2000) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_2001 <- elephant %>%
  filter(Year == 2001) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_2002 <- elephant %>%
  filter(Year == 2002) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_2004 <- elephant %>%
  filter(Year == 2004) %>%
  select(Country,Ecosystem, Estimate,Year)

elephant_data_2005 <- elephant %>%
  filter(Year == 2005) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2006 <- elephant %>%
  filter(Year == 2006) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2007 <- elephant %>%
  filter(Year == 2007) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2008 <- elephant %>%
  filter(Year == 2008) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2009 <- elephant %>%
  filter(Year == 2009) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2010 <- elephant %>%
  filter(Year == 2010) %>%
  select(Country,Ecosystem, Estimate, Year)

elephant_data_2014 <- elephant %>%
  filter(Year == 2014) %>%
  select(Country,Ecosystem, Estimate, Year)
```

## Function for above data wrangling

```{r}

# Function to create filter data for each year
createElephantData <- function(year) {
  elephant_data <- elephant |>
    filter(Year == year) |>
    select(Country, Ecosystem, Estimate, Year)
  
  return(elephant_data)
}

# Example usage:
elephant_data_1995 <- createElephantData(1995)
elephant_data_1996 <- createElephantData(1996)
elephant_data_1998 <- createElephantData(1998)
elephant_data_1999 <- createElephantData(1999)
elephant_data_2000 <- createElephantData(2000)
elephant_data_2001 <- createElephantData(2001)
elephant_data_2002 <- createElephantData(2002)
elephant_data_2004 <- createElephantData(2004)
elephant_data_2005 <- createElephantData(2005)
elephant_data_2006 <- createElephantData(2006)
elephant_data_2007 <- createElephantData(2007)
elephant_data_2008 <- createElephantData(2008)
elephant_data_2009 <- createElephantData(2009)
elephant_data_2010 <- createElephantData(2010)
elephant_data_2014 <- createElephantData(2014)
```

```{r}

# Load the rnaturalearth library
library(rnaturalearth)

# Get geospatial data for the African continent
africa_data <- ne_countries(scale = "medium", continent = "Africa", returnclass = "sf")


ggplot() +
  geom_sf(data = africa_data, fill = "grey", color = "blue") +  # Africa map
  scale_color_gradient(low = "lightyellow", high = "darkgreen") +  # Color scale
  labs(title = "Elephant Data in Africa") +
  theme_minimal()
```

```{r}

install.packages("maptools")
library(maptools)
data(wrld_simpl)
afr=wrld_simpl[wrld_simpl$REGION==2,]
 
# We can visualize the region's boundaries with the plot function
plot(afr)
```

```{r}
# Fit a linear regression model
lm_model <- lm(Estimate ~ Year, data = elephant)

# Get summary of the model
summary(lm_model)
```

```{r}

# Create a scatterplot of the data
plot(elephant$Year, elephant$Estimate, main = "Elephant Estimate Over Time", 
     xlab = "Year", ylab = "Estimate", pch = 16, col = "blue")

# Add the regression line to the plot
abline(lm_model, col = "red")

# Create a new data frame with the years of interest
new_data <- data.frame(Year = 2015:2023)

# Make predictions using the linear regression model
predicted_estimates <- predict(lm_model, newdata = new_data)

predicted_data <- data.frame(Year = new_data$Year, Predicted_Estimate = predicted_estimates)

predicted_data
```

```{r}

library(e1071)  # Load the e1071 package for SVM

# Fit an SVM regression model
svm_model <- svm(Estimate ~ Year, data = elephant, kernel = "linear")

predicted_estimates <- predict(svm_model, newdata = new_data)
predicted_data <- data.frame(Year = new_data$Year, Predicted_Estimate = predicted_estimates)

print(predicted_data)
```

## Africa plots

```{r}

# Assuming you have a data frame named 'elephant_data' with 'Country', 'Estimate' columns

# Merge the elephant data with natural earth data to get the country shapes
world <- ne_countries(scale = "medium", returnclass = "sf")

# Create a ggplot map
elephant_map_1995 <- merge(world, elephant_data_1995, by.x = "name", by.y = "Country")

# Create a ggplot map
ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_1995, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#7EB480", high = "#056937") +
  theme_minimal() +
  labs(title = "Elephant Population Estimates in Africa in 1995")
```

## Heat map

```{r}

```

## Trying for all with transition state

```{r}


# Load the necessary libraries
library(rnaturalearth)
library(ggplot2)
library(gganimate)

# Load the elephant population data (replace this with your own data)
# Assuming you have a data frame named 'elephant_data' with 'Country', 'Estimate', and 'Year' columns

# Merge the elephant data with natural earth data to get the country shapes
world <- ne_countries(scale = "medium", returnclass = "sf")
elephant_map <- merge(world, elephant_data, by.x = "name", by.y = "Country")

# Create a ggplot map
gg <- ggplot() +
  geom_sf(data = world, fill = "white") +
  geom_sf(data = elephant_map, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_minimal() +
  labs(title = "Elephant Population Estimates in Africa") +
  transition_states(Year, transition_length = 2, state_length = 1)

# Animate and save the GIF
animated_map <- animate(gg, nframes = 100, duration = 10)
anim_save("elephant_population_animation.gif", animated_map)
```

## Function to create images for every year

```{r}

get_map <- function(y) {
  elephant_data |> filter(Year == y) %>% 
  ggplot() +
  geom_sf(data = africa, fill = "white") +
   geom_sf(data = elephant_map_1995, aes(fill = Estimate, text = paste("Country: ", name)),
          color = "brown", size = 0.2) +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 1995")
    }

y_list <- elephant_data$Year %>% sort %>% unique
my_maps <- paste0("~/temp/m_", seq_along(y_list), ".png")
for (i in seq_along(y_list)){
    get_map(y = y_list[i])
    ggsave(my_maps[i], width = 4, height = 4)
}

# Specify the directory where the images are saved
image_dir <- "~/temp/"

# Create a list of image file names
image_files <- list.files(image_dir, pattern = "*.png", full.names = TRUE)

# Specify the output video file
output_video <- "~/temp/elephant_population_animation.mp4"

# Use ffmpeg to create a video from the images
#system(paste("ffmpeg -r 1 -i", shQuote(image_files), "-c:v libx264 -vf fps=25 -pix_fmt yuv420p", shQuote(output_video)))

# Display a message when the video creation is complete
cat("Video created successfully:", output_video, "\n")

library(magick)

# Specify the path to the video file
output_video <- "~/temp/elephant_population_animation.mp4"

# Display the video using an external application
browseURL(output_video)

image_files
```

## Shiny app

```{r}

# Install and load the required packages
#install.packages(c("shiny", "shinydashboard", "magick"))
library(shiny)
library(shinydashboard)
library(magick)

# Define the UI
ui <- dashboardPage(
  dashboardHeader(title = "Elephant Population Animation"),
  dashboardSidebar(),
  dashboardBody(
    fluidRow(
      box(
        title = "Elephant Population Animation",
        status = "primary",
        solidHeader = TRUE,
        width = 12,
        imageOutput("video")
      )
    )
  )
)

# Define the server logic
server <- function(input, output) {
  # Specify the path to the video file
  output_video <- "~/temp/elephant_population_animation.mp4"
  
  # Display the video
  output$video <- renderImage({
    list(src = output_video, contentType = "video/mp4")
  }, deleteFile = FALSE)
}

# Run the Shiny app
shinyApp(ui, server)

shiny::runApp("path/to/your/app.R")

```

```{r}

# Install and load the required packages
#install.packages(c("shiny", "shinydashboard", "magick", "here"))
library(shiny)
library(shinydashboard)
library(magick)
library(here)

# Define the UI
ui <- dashboardPage(
  dashboardHeader(title = "Elephant Population Animation"),
  dashboardSidebar(),
  dashboardBody(
    fluidRow(
      box(
        title = "Elephant Population Animation",
        status = "primary",
        solidHeader = TRUE,
        width = 12,
        imageOutput("video")
      )
    )
  )
)

# Define the server logic
server <- function(input, output) {
  # Specify the path to the video file using here
  output_video <- here::here("temp/elephant_population_animation.mp4")
  
  # Display the video
  output$video <- renderImage({
    list(src = output_video, contentType = "video/mp4")
  }, deleteFile = FALSE)
}

# Run the Shiny app
#shinyApp(ui, server)

shiny::runApp("path/to/your/app.R")

```

```{r}

# Load the necessary libraries
library(rnaturalearth)
library(ggplot2)
library(plotly)

# Load the elephant population data (replace this with your own data)
# Assuming you have a data frame named 'elephant_data_1995' with 'Country', 'Estimate' columns

# Merge the elephant data with natural earth data to get the country shapes
africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
elephant_map_1995 <- merge(africa, elephant_data_1995, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_1995 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
   geom_sf(data = elephant_map_1995, aes(fill = Estimate, text = paste("Country: ", name)),
          color = "brown", size = 0.2) +
  scale_fill_gradient(low = "#7EB480", high = "#056937") +
  #scale_fill_viridis_c(option = "inferno") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 1995")

# Convert ggplot to plotly
#elephant_map_1995_plotly <- ggplotly()

# Show the plotly map
#elephant_map_1995_plotly

```

## Plotly map

```{r}

elephant_map_1996 <- merge(world, elephant_data_1996, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_1996 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_1996, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "darkgreen") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 1996")

# Convert ggplot to plotly
#elephant_map_1996_plotly <- ggplotly()

# Show the plotly map
#elephant_map_1996_plotly

gg_map_1996
```

```{r}

library(rnaturalearth)
library(ggplot2)
library(plotly)

# Assuming elephant_data_1996 and world are already defined

# Merge data
elephant_map_1996 <- merge(world, elephant_data_1996, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_1996 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_1996, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
scale_fill_gradient(low = "#91CD71", high = "#056937") +
    theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 1996")

# Convert ggplot to plotly
#elephant_map_1996_plotly <- ggplotly(gg_map)

# Add theme to the hover
#elephant_map_1996_plotly <- elephant_map_1996_plotly %>% 
  #layout(hoverlabel = list(bgcolor = "white", font = list(family = "Arial", color = "black")))


gg_map_1996

```

```{r}

elephant_map_1998 <- merge(world, elephant_data_1998, by.x = "name", by.y = "Country")

scale_limits <- c(0, 10000)

# Create a ggplot map
gg_map_1998 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_1998, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 1998")

gg_map_1998
```

```{r}

elephant_map_1999 <- merge(world, elephant_data_1999, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_1999 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_1999, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 1999")

gg_map_1999
```

```{r}

elephant_map_2000 <- merge(world, elephant_data_2000, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2000 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2000, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2000")

gg_map_2000
```

```{r}

elephant_map_2001 <- merge(world, elephant_data_2001, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2001 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2001, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2001")

gg_map_2001
```

```{r}

elephant_map_2002 <- merge(world, elephant_data_2002, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2002 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2002, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2002")

gg_map_2002
```

```{r}

elephant_map_2004 <- merge(world, elephant_data_2004, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2004 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2004, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2004")

gg_map_2004
```

```{r}

elephant_map_2005 <- merge(world, elephant_data_2005, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2005 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2005, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2005")

gg_map_2005
```

```{r}

elephant_map_2006 <- merge(world, elephant_data_2006, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2006 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2006, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2006")

gg_map_2006
```

```{r}

elephant_map_2007 <- merge(world, elephant_data_2007, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2007 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2007, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2007")

gg_map_2007
```

```{r}

elephant_map_2008 <- merge(world, elephant_data_2008, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2008 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2008, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2008")

gg_map_2008
```

```{r}

elephant_map_2009 <- merge(world, elephant_data_2009, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2009 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2009, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2009")

gg_map_2009
```

```{r}

elephant_map_2010 <- merge(world, elephant_data_2010, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2010 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2010, aes(fill = Estimate), color = "brown", size = 0.2) +
  #scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2010")

gg_map_2010
```

```{r}

elephant_map_2014 <- merge(world, elephant_data_2014, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map_2014 <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2014, aes(fill = Estimate), color = "brown", size = 0.2) +
  #scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "#91CD71", high = "#056937") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2014")

gg_map_2014
```

```{r}

library(rnaturalearth)
library(ggplot2)
library(plotly)

generate_elephant_map <- function(data) {
  # Load the natural earth data for Africa
  africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
  
  # Merge the elephant data with natural earth data to get the country shapes
  elephant_map <- merge(africa, data, by.x = "name", by.y = "Country")
  
  # Create a ggplot map
  ggplot() +
    geom_sf(data = africa, fill = "white") +
    geom_sf(data = elephant_map, aes(fill = Estimate, text = paste("Country: ", name)),
            color = "brown", size = 0.2) +
    scale_fill_gradient(low = "skyblue", high = "darkgreen") +
    theme_void() +
    labs(title = paste("Elephant Population Estimates in Africa in", year))
  
  # Convert ggplot to plotly
  ggplotly()
}

# Example usage:
# Assuming you have a data frame named 'elephant_data_1995' with 'Country', 'Estimate' columns
# generate_elephant_map(elephant_data_1995, 1995)

```

### Function

```{r}


library(rnaturalearth)
library(ggplot2)
library(plotly)
library(magick)

generate_elephant_map <- function(data,year) {
  # Load the natural earth data for Africa
  africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
  
  # Merge the elephant data with natural earth data to get the country shapes
  elephant_map <- merge(africa, data, by.x = "name", by.y = "Country")
  
  # Create a ggplot map
  gg <- ggplot() +
    geom_sf(data = africa, fill = "white") +
    geom_sf(data = elephant_map, aes(fill = Estimate, text = paste("Country: ", name)),
            color = "brown", size = 0.2) +
    scale_fill_gradient(low = "skyblue", high = "darkgreen") +
    theme_void() +
    labs(title = paste("Elephant Population Estimates in Africa in", year))
  
  # Convert ggplot to plotly
  gg_plotly <- ggplotly(gg)
  
  return(gg_plotly)
}


# Specify the years
years <- c(1995, 1996, 2005, 2010, 2014)

# Create a list to store the plotly objects
plotly_list <- list()

# Generate plots for each year
for (year in years) {
  plotly_list[[as.character(year)]] <- generate_elephant_map(get(paste0("elephant_data_", year)), year)
}
```

```{r}

library(rnaturalearth)
library(ggplot2)
library(plotly)

create_elephant_map <- function(elephant_data, year) {
  # Load the natural earth data for Africa
  africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
  
  # Merge the elephant data with natural earth data to get the country shapes
  elephant_map <- merge(africa, elephant_data, by.x = "name", by.y = "Country")
  
  # Create a ggplot map
  gg <- ggplot() +
    geom_sf(data = africa, fill = "white") +
    geom_sf(data = elephant_map, aes(fill = Estimate), color = "brown", size = 0.2) +
    scale_fill_viridis_c(
      option = "plasma", name = "Estimate", 
      limits = c(30000, 60000),
      breaks = seq(30000, 60000, by = 5000),
      labels = scales::comma_format(scale = 1e-3, accuracy = 1),
      trans = "log",
      guide = guide_colorbar(barwidth = 10, barheight = 1, title.position = "top", title.hjust = 0.5)
    ) +
    theme_void() +
    labs(title = paste("Elephant Population Estimates in Africa in", year))
  
  # Convert ggplot to plotly
  gg_plotly <- ggplotly(gg)
  return(gg)
}



# Call the function with the data for 1996
#elephant_1995_plot <- generate_elephant_map(elephant_data_1995, 1995)
elephant_1996_plot <- generate_elephant_map(elephant_data_1996, 1996)
elephant_2005_plot <- generate_elephant_map(elephant_data_2005, 2005)
elephant_2006_plot <- generate_elephant_map(elephant_data_2006, 2006)
elephant_2010_plot <- generate_elephant_map(elephant_data_2010, 2010)
elephant_2014_plot <- generate_elephant_map(elephant_data_2014, 2014)
```

## All Elephant plots

```{r}

elephant_1996_plot
```

```{r}

elephant_1996_plot
```

```{r}

elephant_2006_plot
```

```{r}

elephant_2010_plot
```

```{r}

elephant_2014_plot
```

```{r}

library(gganimate)

# Combine your ggplot objects into a list
plots <- list(
  gg_map_1995,
  gg_map_1996,
  gg_map_1998,
  gg_map_1999,
  gg_map_2000,
  gg_map_2001,
  gg_map_2002,
  gg_map_2005,
  gg_map_2006,
  gg_map_2007,
  gg_map_2008,
  gg_map_2009,
  gg_map_2010,
  gg_map_2014
)
```

```{r}

# Install and load the required packages
#install.packages(c("shiny", "shinydashboard", "plotly", "ggplot2"))
library(shiny)
library(shinydashboard)
library(plotly)
library(ggplot2)

# Assuming you have a list of Plotly plots
plots <- list(
  gg_map_1996,
  gg_map_2000,
  gg_map_2006,
  gg_map_2010,
  gg_map_2014
)
```

```{r}

library(animation)
## make sure ImageMagick has been installed in your system

# Assuming you have a list of Plotly plots


# Additional libraries
library(animation)

# Make sure ImageMagick has been installed on your system

# Save GIF animation
saveGIF({
  for (i in seq_along(plots)) {
    print(plots[[i]])
    Sys.sleep(1)  # Add a sleep to control the speed of the animation
  }
}, interval = 1, movie.name = "elephant_animation.gif", ani.width = 800, ani.height = 400, fps = 10)


```

```{r}

knitr::include_graphics("elephant_animation.gif")
```

```{r}

library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)

# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Load Okavango Delta data (example coordinates, replace with actual data)
okavango_coords <- data.frame(
  lon = 22.9071,
  lat = -18.6027
)

okavango_sf <- st_as_sf(okavango_coords, coords = c("lon", "lat"), crs = st_crs(world))

# Plot the map
ggplot() +
  geom_sf(data = africa, fill = "white", color = "black") +
  geom_sf(data = okavango_sf, color = "red", size = 2) +
  ggtitle("Okavango Delta in Africa") +
  theme_void()

```
