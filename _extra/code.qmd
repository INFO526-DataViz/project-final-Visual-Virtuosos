```{r}
#| label: load-pkgs
#| message: false

suppressWarnings(library(tidyverse))

if (!require("pacman")) 
  install.packages("pacman")

pacman::p_load(knitr,tidyverse,lubridate,here,dplyr,here,ggplot2,ggmap,maps,rnaturalearth,rnaturalearthdata,sf,plotly,magick,listviewer,shiny,gganimate,gifski,shiny,shinydashboard,imager)
```

## Dataset Setup

```{r}

elephant <- readxl::read_xlsx(here("data","elephant_data.xlsx"))
```

## Plots

```{r}

# Load the Africa countries dataset
africa <- ne_countries(scale = "medium", continent = "Africa", returnclass = "sf")

```

```{r}

# Load the required libraries
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(gganimate)

# Load the Africa countries dataset
africa <- ne_countries(scale = "medium", continent = "Africa", returnclass = "sf")

# Create a sample dataset with elephant estimates by ISO country code
elephant_data <- data.frame(
  iso_a3 = c("KEN", "TZA", "UGA", "ZAF", "MOZ"),  # ISO country codes
  elephants = c(3000, 5000, 1500, 2000, 4000)  # Estimated elephant populations
)


# Match the elephant data to the countries in the Africa dataset
africa$elephants <- NA  # Create a new column for the elephant estimates
africa$elephants[africa$sovereignt %in% elephant$Country] <- elephant$Estimate

# Create the map
ggplot(africa) +
  geom_sf(aes(fill = elephants)) +
  scale_fill_gradient(low = "lightblue", high = "darkgreen") +
  labs(title = "Elephant Estimates in African Countries") +
  transition_states() +
  theme_minimal()
```

```{r}

library(dplyr)
# Select the columns of interest (e.g., country and estimate)

elephant_data <- elephant |>
  select(Country,Ecosystem,Estimate,Year)

elephant_data_1995 <- elephant %>%
  filter(Year == 1995) %>%
  select(Country,Ecosystem, Estimate)

elephant_data_1996 <- elephant %>%
  filter(Year == 1996) %>%
  select(Country,Ecosystem, Estimate)

elephant_data_2001 <- elephant %>%
  filter(Year == 2001) %>%
  select(Country,Ecosystem, Estimate)

elephant_data_2005 <- elephant %>%
  filter(Year == 2005) %>%
  select(Country,Ecosystem, Estimate)

elephant_data_2006 <- elephant %>%
  filter(Year == 2006) %>%
  select(Country,Ecosystem, Estimate)

elephant_data_2010 <- elephant %>%
  filter(Year == 2010) %>%
  select(Country,Ecosystem, Estimate)

elephant_data_2014 <- elephant %>%
  filter(Year == 2014) %>%
  select(Country,Ecosystem, Estimate)
```

```{r}

# Load the rnaturalearth library
library(rnaturalearth)

# Get geospatial data for the African continent
africa_data <- ne_countries(scale = "medium", continent = "Africa", returnclass = "sf")


ggplot() +
  geom_sf(data = africa_data, fill = "grey", color = "blue") +  # Africa map
  #geom_point(data = elephant, aes(color = Estimate), size = 3) +  # Elephant data as scatter plot
  scale_color_gradient(low = "lightyellow", high = "darkgreen") +  # Color scale
  labs(title = "Elephant Data in Africa") +
  theme_minimal()
```

```{r}

# Fit a logistic regression model
# Fit a linear regression model
lm_model <- lm(Estimate ~ Year, data = elephant)

# Get summary of the model
summary(lm_model)
```

```{r}

# Create a scatterplot of the data
plot(elephant$Year, elephant$Estimate, main = "Elephant Estimate Over Time", 
     xlab = "Year", ylab = "Estimate", pch = 16, col = "blue")

# Add the regression line to the plot
abline(lm_model, col = "red")

# Create a new data frame with the years of interest
new_data <- data.frame(Year = 2015:2023)

# Make predictions using the linear regression model
predicted_estimates <- predict(lm_model, newdata = new_data)

predicted_data <- data.frame(Year = new_data$Year, Predicted_Estimate = predicted_estimates)

predicted_data
```

```{r}

library(e1071)  # Load the e1071 package for SVM

# Fit an SVM regression model
svm_model <- svm(Estimate ~ Year, data = elephant, kernel = "linear")

predicted_estimates <- predict(svm_model, newdata = new_data)
predicted_data <- data.frame(Year = new_data$Year, Predicted_Estimate = predicted_estimates)

print(predicted_data)
```

## Africa plots

```{r}

# Load the necessary libraries
library(rnaturalearth)
library(ggplot2)

# Load the elephant population data (replace this with your own data)
# Assuming you have a data frame named 'elephant_data' with 'Country', 'Estimate' columns

# Merge the elephant data with natural earth data to get the country shapes
world <- ne_countries(scale = "medium", returnclass = "sf")

# Create a ggplot map
elephant_map_1995 <- merge(world, elephant_data_1995, by.x = "name", by.y = "Country")

# Create a ggplot map
ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_1995, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_minimal() +
  labs(title = "Elephant Population Estimates in Africa in 1995")
```

## Trying for all with transition state

```{r}


# Load the necessary libraries
library(rnaturalearth)
library(ggplot2)
library(gganimate)

# Load the elephant population data (replace this with your own data)
# Assuming you have a data frame named 'elephant_data' with 'Country', 'Estimate', and 'Year' columns

# Merge the elephant data with natural earth data to get the country shapes
world <- ne_countries(scale = "medium", returnclass = "sf")
elephant_map <- merge(world, elephant_data, by.x = "name", by.y = "Country")

# Create a ggplot map
gg <- ggplot() +
  geom_sf(data = world, fill = "white") +
  geom_sf(data = elephant_map, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_minimal() +
  labs(title = "Elephant Population Estimates in Africa") +
  transition_states(Year, transition_length = 2, state_length = 1)

# Animate and save the GIF
animated_map <- animate(gg, nframes = 100, duration = 10)
anim_save("elephant_population_animation.gif", animated_map)
```

## Function to create images for every year

```{r}

get_map <- function(y) {
  elephant_data |> filter(Year == y) %>% 
  ggplot() +
  geom_sf(data = africa, fill = "white") +
   geom_sf(data = elephant_map_1995, aes(fill = Estimate, text = paste("Country: ", name)),
          color = "brown", size = 0.2) +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 1995")
    }

y_list <- elephant_data$Year %>% sort %>% unique
my_maps <- paste0("~/temp/m_", seq_along(y_list), ".png")
for (i in seq_along(y_list)){
    get_map(y = y_list[i])
    ggsave(my_maps[i], width = 4, height = 4)
}

# Specify the directory where the images are saved
image_dir <- "~/temp/"

# Create a list of image file names
image_files <- list.files(image_dir, pattern = "*.png", full.names = TRUE)

# Specify the output video file
output_video <- "~/temp/elephant_population_animation.mp4"

# Use ffmpeg to create a video from the images
system(paste("ffmpeg -r 1 -i", shQuote(image_files), "-c:v libx264 -vf fps=25 -pix_fmt yuv420p", shQuote(output_video)))

# Display a message when the video creation is complete
cat("Video created successfully:", output_video, "\n")

library(magick)

# Specify the path to the video file
output_video <- "~/temp/elephant_population_animation.mp4"

# Display the video using an external application
browseURL(output_video)
```

## Shiny app

```{r}

# Load the necessary libraries
library(shiny)
library(shinydashboard)
install.packages("imager")

library(imager)

# Define the UI
ui <- dashboardPage(
  dashboardHeader(title = "Elephant Population Animation"),
  dashboardSidebar(),
  dashboardBody(
    fluidRow(
      box(
        title = "Elephant Population Animation",
        status = "primary",
        solidHeader = TRUE,
        width = 12,
        imagerOutput("video")
      )
    )
  )
)

# Define the server logic
server <- function(input, output) {
  # Specify the path to the video file
  output_video <- "~/temp/elephant_population_animation.mp4"
  
  # Display the video
  output$video <- renderImager({
    imager::imager(display.read.video(output_video))
  })
}

# Run the Shiny app
shinyApp(ui, server)
```

```{r}


```

```{r}

# Load the necessary libraries
library(rnaturalearth)
library(ggplot2)
library(plotly)

# Load the elephant population data (replace this with your own data)
# Assuming you have a data frame named 'elephant_data_1995' with 'Country', 'Estimate' columns

# Merge the elephant data with natural earth data to get the country shapes
africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
elephant_map_1995 <- merge(africa, elephant_data_1995, by.x = "name", by.y = "Country")

# Create a ggplot map
ggplot() +
  geom_sf(data = africa, fill = "white") +
   geom_sf(data = elephant_map_1995, aes(fill = Estimate, text = paste("Country: ", name)),
          color = "brown", size = 0.2) +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 1995")

# Convert ggplot to plotly
elephant_map_1995_plotly <- ggplotly()

# Show the plotly map
elephant_map_1995_plotly

```

## Plotly map

```{r}

elephant_map_1996 <- merge(world, elephant_data_1996, by.x = "name", by.y = "Country")

# Create a ggplot map
ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_1996, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 1996")

# Convert ggplot to plotly
elephant_map_1996_plotly <- ggplotly()

# Show the plotly map
elephant_map_1996_plotly
```

```{r}

library(rnaturalearth)
library(ggplot2)
library(plotly)

# Assuming elephant_data_1996 and world are already defined

# Merge data
elephant_map_1996 <- merge(world, elephant_data_1996, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_map <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_1996, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 1996")

# Convert ggplot to plotly
elephant_map_1996_plotly <- ggplotly(gg_map)

# Add theme to the hover
elephant_map_1996_plotly <- elephant_map_1996_plotly %>% 
  layout(hoverlabel = list(bgcolor = "white", font = list(family = "Arial", color = "black")))

# Show the plotly map
elephant_map_1996_plotly

```

```{r}



```

```{r}

elephant_map_2001 <- merge(world, elephant_data_2001, by.x = "name", by.y = "Country")

# Create a ggplot map
ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2001, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_minimal() +
  labs(title = "Elephant Population Estimates in Africa in 2001")
```

```{r}

elephant_map_2005 <- merge(world, elephant_data_2005, by.x = "name", by.y = "Country")

# Create a ggplot map
ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2005, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_minimal() +
  labs(title = "Elephant Population Estimates in Africa in 2005")
```

```{r}

elephant_map_2006 <- merge(world, elephant_data_2006, by.x = "name", by.y = "Country")

# Create a ggplot map
ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2006, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_minimal() +
  labs(title = "Elephant Population Estimates in Africa in 2006")
```

```{r}

elephant_map_2010 <- merge(world, elephant_data_2010, by.x = "name", by.y = "Country")

# Create a ggplot map
ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2010, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_void() +
  labs(title = "Elephant Population Estimates in Africa in 2010")
```

```{r}

elephant_map_2014 <- merge(world, elephant_data_2014, by.x = "name", by.y = "Country")

# Create a ggplot map
ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map_2014, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Estimate") +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_minimal() +
  labs(title = "Elephant Population Estimates in Africa in 2014")
```

```{r}

library(rnaturalearth)
library(ggplot2)
library(plotly)

generate_elephant_map <- function(data) {
  # Load the natural earth data for Africa
  africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
  
  # Merge the elephant data with natural earth data to get the country shapes
  elephant_map <- merge(africa, data, by.x = "name", by.y = "Country")
  
  # Create a ggplot map
  ggplot() +
    geom_sf(data = africa, fill = "white") +
    geom_sf(data = elephant_map, aes(fill = Estimate, text = paste("Country: ", name)),
            color = "brown", size = 0.2) +
    scale_fill_gradient(low = "skyblue", high = "darkgreen") +
    theme_void() +
    labs(title = paste("Elephant Population Estimates in Africa in", year))
  
  # Convert ggplot to plotly
  ggplotly()
}

# Example usage:
# Assuming you have a data frame named 'elephant_data_1995' with 'Country', 'Estimate' columns
# generate_elephant_map(elephant_data_1995, 1995)

```

### Function

```{r}


library(rnaturalearth)
library(ggplot2)
library(plotly)
library(magick)

generate_elephant_map <- function(data,year) {
  # Load the natural earth data for Africa
  africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
  
  # Merge the elephant data with natural earth data to get the country shapes
  elephant_map <- merge(africa, data, by.x = "name", by.y = "Country")
  
  # Create a ggplot map
  gg <- ggplot() +
    geom_sf(data = africa, fill = "white") +
    geom_sf(data = elephant_map, aes(fill = Estimate, text = paste("Country: ", name)),
            color = "brown", size = 0.2) +
    scale_fill_gradient(low = "skyblue", high = "darkgreen") +
    theme_void() +
    labs(title = paste("Elephant Population Estimates in Africa in", year))
  
  # Convert ggplot to plotly
  gg_plotly <- ggplotly(gg)
  
  return(gg_plotly)
}


# Specify the years
years <- c(1995, 1996, 2005, 2010, 2014)

# Create a list to store the plotly objects
plotly_list <- list()

# Generate plots for each year
for (year in years) {
  plotly_list[[as.character(year)]] <- generate_elephant_map(get(paste0("elephant_data_", year)), year)
}
```

```{r}

library(rnaturalearth)
library(ggplot2)
library(plotly)

generate_elephant_map <- function(elephant_data, year) {
  # Load the natural earth data for Africa
  africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
  
  # Merge the elephant data with natural earth data to get the country shapes
  elephant_map <- merge(africa, elephant_data, by.x = "name", by.y = "Country")
  
  # Create a ggplot map
  gg <- ggplot() +
    geom_sf(data = africa, fill = "white") +
    geom_sf(data = elephant_map, aes(fill = Estimate), color = "brown", size = 0.2) +
    scale_fill_viridis_c(option = "plasma", name = "Estimate") +
    scale_fill_gradient(low = "skyblue", high = "darkgreen") +
    theme_void() +
    labs(title = paste("Elephant Population Estimates in Africa in", year))
  
  # Convert ggplot to plotly
  gg_plotly <- ggplotly(gg)
  
  return(gg_plotly)
}


# Call the function with the data for 1996
#elephant_1995_plot <- generate_elephant_map(elephant_data_1995, 1995)
elephant_1996_plot <- generate_elephant_map(elephant_data_1996, 1996)
elephant_2005_plot <- generate_elephant_map(elephant_data_2005, 2005)
elephant_2006_plot <- generate_elephant_map(elephant_data_2006, 2006)
elephant_2010_plot <- generate_elephant_map(elephant_data_2010, 2010)
elephant_2014_plot <- generate_elephant_map(elephant_data_2014, 2014)

elephant_data_2010

elephant_2014_plot
```

## All Elephant plots

```{r}

elephant_1996_plot
elephant_2005_plot
elephant_2006_plot
elephant_2010_plot
elephant_2014_plot
```

```{r}

elephant_2005_plot
```

```{r}

elephant_2006_plot
```

```{r}

elephant_2010_plot
```

```{r}

elephant_2014_plot
```

```{r}

library(gganimate)

# Combine your ggplot objects into a list
plots <- list(
  elephant_1996_plot,
  elephant_2005_plot,
  elephant_2006_plot,
  elephant_2010_plot,
  elephant_2014_plot
)






```

```{r}


library(rnaturalearth)
library(ggplot2)

# Load the elephant population data (replace this with your own data)
# Assuming you have a data frame named 'elephant_data' with 'Country', 'Estimate' columns

# Merge the elephant data with natural earth data to get the country shapes
world <- ne_countries(scale = "medium", returnclass = "sf")

# Create a ggplot map
elephant_map <- merge(world, elephant, by.x = "name", by.y = "Country")

# Create a ggplot map
ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = elephant_map, aes(fill = Estimate), color = "brown", size = 0.2) +
  scale_fill_gradient(low = "skyblue", high = "darkgreen") +
  theme_minimal() +
  labs(title = "Elephant Population Estimates in Africa in 1995") +
  transition_states(elephant$Year,transition_length = 3,state_length = 1)
```

```{r}

library(ggplot2)
library(gganimate)
library(rnaturalearth)

# Function to generate animated map
generate_elephant_map <- function(elephant_data) {
  # Load the natural earth data for Africa
  africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
  
  # Merge the elephant data with natural earth data to get the country shapes
  elephant_map <- merge(africa, elephant_data, by.x = "name", by.y = "Country")
  
  # Create a ggplot map
  gg <- ggplot() +
    geom_sf(data = africa, fill = "white") +
    geom_sf(data = elephant_map, aes(fill = Estimate), color = "brown", size = 0.2) +
    scale_fill_gradient(low = "skyblue", high = "darkgreen") +
    theme_minimal() +
    labs(title = "Elephant Population Estimates in Africa in {closest_state}") +
    transition_states(elephant$Year, transition_length = 3, state_length = 1)
    
  return(gg)
}

# Create a fictional dataset
set.seed(123)
elephant_data <- data.frame(
  Country = africa$name,
  Year = rep(1995:2015, each = length(africa$name)),
  Estimate = runif(length(africa$name) * 21, min = 100, max = 10000)
)

# Call the function with the fictional dataset
animated_map <- generate_elephant_map(elephant_data)

animated_map
# Save the animation as a GIF
anim_save("animated_map.gif", animated_map)

```
