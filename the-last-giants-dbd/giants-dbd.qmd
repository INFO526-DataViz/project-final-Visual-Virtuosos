---
title: The Last Giants
author: Visual Virtuosos
format: dashboard
theme: yeti
---

```{r}

if (!require("pacman")) 
  install.packages("pacman")


pacman::p_load(knitr,tidyverse,lubridate,here,dplyr,ggplot2,ggmap,maps,rnaturalearth,rnaturalearthdata,sf,plotly,caret,glmnet,viridis,rcartocolor,forcats,tidymodels)

```



```{r}
## Dataset Setup

elephant <- readxl::read_xlsx(here("elephant_data.xlsx"))
```




# Ecosystems {orientation="columns"}

## Column {width="50%"}

```{r}
#| title: "Ecosystem of the Savannah Elephants"

#------------------- Installing libraries-------------------------------------

library(circularEV)
library(rnaturalearth)
library(ggplot2)
library(plotly)
library(ggiraph)
library(ggshadow)

library(raster)
library(rayshader)
library(rgl)

#------------------- Mapping the dataset with the "Africa" dataset in rnaturalearth-------

africa <- ne_countries(scale = "medium", returnclass = "sf", continent = "Africa")
cnt <- ne_countries(scale = "medium", returnclass = "sf", country = "sudan")
cnt2 <- ne_countries(scale = "medium", returnclass = "sf", country = "senegal")
col1 <- c("Angola", "Botswana", "Cameroon", "Chad", "Congo", "Kenya","Malawi",
          "Mali", "Mozambique", "South Africa", "Tanzania","Uganda", "Zambia", "Zimbabwe")
#col2 <- c(20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20)

col3 <- c(43459, 101599, 20598, 9799, 9349, 85711, 2991, 3944, 101077, 19809, 268250,
          10938, 84814, 68851)

eco <- data.frame(col1,col3)

eco2 <- merge(africa, eco, by.x = "name", by.y = "col1")


#------------------- Creating the ggplot -------------------------------------
map <- ggplot() +
  geom_sf(data = africa) +
  geom_sf(data= eco2, aes(fill = col3), color = "white", linewidth = 0.5)+
  guides(fill=guide_legend(title=bquote('Area'~(km^2)), reverse=TRUE)
         )+
  theme_void()+
  theme(
    plot.background = element_rect(
      fill = "white",
      colour = "white"
    ))  
#map

#------------------- Converting the 2-D ggplot to 3-D-------------------------------------

map3d <- plot_gg(map,
                 width=5,
                 height=5,
                 scale = 350,
                 windowsize = c(1000, 1000),
                 phi = 30,
                 save_height_matrix = FALSE,
                 theta = 0,
                 flat_transparent_bg = TRUE,
                 invert = FALSE
                 )

#------------------- Annotating the top countries-------------------------------------

Tanzania_coords <- c(x = 200, y = 520, z = 50)
rgl::text3d(x = Tanzania_coords[1], y = Tanzania_coords[2], z = Tanzania_coords[3],
            text = "Tanzania", col = "black", cex = 0.9)

rgl::lines3d(c(200, 200, 200),
             c(50, 100, 500),
             c(50, 50, 50),
             col = "black")



Botswana_coords <- c(x = 50, y = 420, z = 250)
rgl::text3d(x = Botswana_coords[1], y = Botswana_coords[2], z = Botswana_coords[3],
            text = "Botswana", col = "black", cex = 0.9)

rgl::lines3d(c(50, 50, 50),
             c(50, 100, 400),
             c(250, 250, 250),
             col = "black")


Mozam_coords <- c(x = 220, y = 320, z = 190)
rgl::text3d(x = Mozam_coords[1], y = Mozam_coords[2], z = Mozam_coords[3],
            text = "Mozambique", col = "black", cex = 0.9)

rgl::lines3d(c(220, 220, 220),
             c(50, 100, 300),
             c(190, 190, 190),
             col = "black")


kenya_coords <- c(x = 250, y = 270, z = -90)
rgl::text3d(x = kenya_coords[1], y = kenya_coords[2], z = kenya_coords[3],
            text = "Kenya", col = "black", cex = 0.9)

rgl::lines3d(c(250, 250, 250),
             c(50, 100, 250),
             c(-90, -90, -90),
             col = "black")




zambia_coords <- c(x = 50, y = 220, z = 150)
rgl::text3d(x = zambia_coords[1], y = zambia_coords[2], z = zambia_coords[3],
            text = "Zambia", col = "black", cex = 0.9)

rgl::lines3d(c(50, 50, 50),
             c(50, 100, 200),
             c(150, 150, 150),
             col = "black")


# Reference lines

# rgl::lines3d(c(50, 50, 50),
#              c(50, 100, 500),
#              c(50, 50, 50),
#              col = "red")
# 
# rgl::lines3d(c(100, 100, 100),
#              c(50, 100, 500),
#              c(50, 50, 50),
#              col = "darkgreen")


# render_movie(filename = "final3d.mp4", type = "orbit",
#              frames = 360,  phi = 35, zoom = 0.8, theta = -90)


rgl::rglwidget()

```











## Column

<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body {font-family: Arial;}

/* Style the tab */
.tab {
  overflow: hidden;
  border: 1px solid #ccc;
  background-color: #f1f1f1;
}

/* Style the buttons inside the tab */
.tab button {
  background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 14px 16px;
  transition: 0.3s;
  font-size: 17px;
}

/* Change background color of buttons on hover */
.tab button:hover {
  background-color: #ddd;
}

/* Create an active/current tablink class */
.tab button.active {
  background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
  display: none;
  padding: 6px 12px;
  border: 1px solid #ccc;
  border-top: none;
}
</style>
</head>
<body>

<h2>Top 5 largest Ecosystems</h2>

<div class="tab">
  <button class="tablinks" onclick="openCity(event, 'Tanzania')">Tanzania</button>
  <button class="tablinks" onclick="openCity(event, 'Botswana')">Botswana</button>
  <button class="tablinks" onclick="openCity(event, 'Mozambique')">Mozambique</button>
  <button class="tablinks" onclick="openCity(event, 'Kenya')">Kenya</button>
  <button class="tablinks" onclick="openCity(event, 'Zambia')">Zambia</button>
</div>

<div id="Tanzania" class="tabcontent">
  <h5>Savannah Elephant Ecosystems in Tanzania</h5>
  
  <p> 
  <ul>
  <li>Names of ecosystems - Burigi-Biharamulo, Katavi-Rukwa, Malagarasi-Muyovosi, Ruaha-Rungwa, Selous-Mikumi, Serengeti, Tarangire-Manyara</li>
  <li>Total Ecosystem area (km2) = 268,250</li>
  </ul>
  </p>
  <figure>
  <img src="tan1.png" alt="tan1" style="width:40%">
  <figcaption>Fig.1 Burigi-Biharamulo, Tanzania</figcaption>
  </figure>
  
</div>



<div id="Botswana" class="tabcontent">
  <h5>Savannah Elephant Ecosystems in Botswana</h5>
  
  <p> 
  <ul>
  <li>Names of ecosystems - Northern Botswana, Tuli
</li>
  <li>Total Ecosystem area (km2) = 101,599
</li>
  </ul>
  </p>
  <figure>
  <img src="bots1.jpg" alt="bots1" style="width:40%">
  <figcaption>Fig.2 Tuli, Botswana</figcaption>
  </figure>
  
</div>



<div id="Mozambique" class="tabcontent">
  <h5>Savannah Elephant Ecosystems in Mozambique</h5>
  
  <p> 
  <ul>
  <li>Names of ecosystems - Limpopo NP, Marromeo Buffalo R, Niassa NR, Quirimbas NP, Tete Province / Magoe
</li>
  <li>Total Ecosystem area (km2) = 101,077

</li>
  </ul>
  </p>
  <figure>
  <img src="mozam1.jpg" alt="mozam1" style="width:20%">
  <figcaption>Fig.3 Limpopo NP, Mozambique</figcaption>
  </figure>
  
</div>



<div id="Kenya" class="tabcontent">
  <h5>Savannah Elephant Ecosystems in Kenya</h5>
  
  <p> 
  <ul>
  <li>Names of ecosystems - Laikipia-Samburu, Masai Mara, Tsavo-Amboseli
</li>
  <li>Total Ecosystem area (km2) = 85,711
</li>
  </ul>
  </p>
  <figure>
  <img src="kenya1.jpg" alt="kenya1" style="width:40%">
  <figcaption>Fig.4 Masai Mara, Kenya</figcaption>
  </figure>
  
</div>


<div id="Zambia" class="tabcontent">
  <h5>Savannah Elephant Ecosystems in Zambia</h5>
  
  <p> 
  <ul>
  <li>Names of ecosystems - Luangwa, West Zambezi
</li>
  <li>Total Ecosystem area (km2) = 84,814
</li>
  </ul>
  </p>
  <figure>
  <img src="zambia1.jpg" alt="zambia1" style="width:40%">
  <figcaption>Fig.5 Masai Mara, Zambia</figcaption>
  </figure>
  
</div>


<script>
function openCity(evt, cityName) {
  var i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById(cityName).style.display = "block";
  evt.currentTarget.className += " active";
}
</script>
   
</body>
</html> 

# Population Trend{orientation="columns"}

## Column {width = "50%"}

```{r}
#| title: "Trend in Elephant Population from 1995-2014"

total_estimate_per_year <- elephant |>
  group_by(Year) |>
  summarise(Population = sum(Estimate))

total_estimate_per_year <- total_estimate_per_year |>
  filter(Year != 2015)

# Fitting a linear regression model
lm_model <- lm(Estimate ~ Year, data = elephant)

# Defining a recipe
ols_recipe <- recipe(Population ~ Year, data = total_estimate_per_year) |>
  step_center(Year, all_predictors()) |>
  step_scale(Year, all_predictors())

# Defining the linear regression model
ols_model <- linear_reg() |>
  set_engine("lm")

# Combining recipe and model into a workflow
ols_workflow <- workflow() |>
  add_recipe(ols_recipe) |>
  add_model(ols_model)

# Training the OLS model
ols_fit <- ols_workflow |>
  fit(data = total_estimate_per_year)

# Creating a new data frame for prediction (between years 2015-2023)
new_years <- data.frame(Year = 2015:2023)

# Making predictions using the trained OLS model
ols_predictions <- predict(ols_fit, new_data = new_years)

# Combining the new years and predictions
ols_predictions_data <- data.frame(Year = new_years$Year, Population = ols_predictions$.pred)

# Specify the training control
train_control <- trainControl(method = "cv", number = 5)

# Train the OLS model using cross-validation
ols_model <- train(Population ~ Year, data = total_estimate_per_year, method = "lm", trControl = train_control)

# Plotting the estimated of elephant population between 1995 to 2014
p <- ggplot(total_estimate_per_year, aes(x = Year, y = Population, group = 1)) +
  geom_line() +
  stat_smooth(method = "loess", se = FALSE) +
  ggtitle("Combined Data: Estimate Over Time") +
  xlab("Year") +
  ylab("Estimate") +
  scale_y_continuous(limits = c(0, 500000), expand = c(0, 0), labels = comma_format(scale = 1e-3)) +
  scale_color_manual(values = c("black", "red3"), guide = FALSE) +
  labs(
    x = "Year",
    y = "Population (in Thousands)"
  ) +
  theme_minimal()

# Convert ggplot to plotly
population_trend <- ggplotly(p)

population_trend
```

## Column {width = "50%"}

```{r}
#| title: "Trend in Elephant Population from 1995-2023"

# Combining both the actual and predicted data using rowbind
combined_data <- rbind(total_estimate_per_year, ols_predictions_data)

# Plotting all the estimates of elephant population between 1995-2023
combined_prediction <- ggplot(combined_data, aes(x = Year, y = Population, group = 1)) +
  geom_line(aes(color = ifelse(Year <= 2014, "Population Trend", "Prediction"))) +
  stat_smooth(method = "loess", se = FALSE) +
  scale_y_continuous(limits = c(0, 500000), expand = c(0, 0), labels = scales::comma_format(scale = 1e-3)) +
  scale_color_manual(values = c("Population Trend" = "black", "Prediction" = "red3"), guide = FALSE) +
  labs(
    x = "Year",
    y = "Population (in Thousands)"
    ) +
  theme_minimal() +
  theme(legend.position = "bottom")

# Convert ggplot to plotly
combined_prediction_plot <- ggplotly(combined_prediction, tooltip = c("Year", "y"))

combined_prediction_plot

```

# Ivory trade {orientation="columns"}



```{r}

ivory_exports_data <- read_csv(here("cites_ivory_export.csv"))
```








## Column {width="55%"}

```{r}

# Counting the number of instances for each year
export_count_per_year <- ivory_exports_data |>
  group_by(Year) |>
  summarise(export_count = n())

# Assuming `count_per_year` is your dataset
export_count_per_year <- export_count_per_year |>
  filter(Year > 1994)

#glimpse(export_count_per_year)
```

```{r}
#| title: "Ivory exports in Africa from 1995 to 2022"

# Plotting the Ivory exports between 1990 to 2022
exports_barplot <- ggplot(export_count_per_year, aes(x = as.factor(Year), y = export_count, fill = as.factor(Year), text = paste("Export count: ", export_count))) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_viridis_d(option = "C") +
  labs(
    x = "Year",
    y = "Number of exports",
    caption = "Source: CITES (Convention of International Trade in Endangered Species of Wild Fauna and Flora)"
  ) +
  guides(fill = FALSE) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

# Convert ggplot to plotly
exports_plotly <- ggplotly(exports_barplot, tooltip = "text")

# Display the interactive plot
exports_plotly
```

### Row {height="60%"}


### Row {height="40%"}

```{r}

#| title: "Type of ivory export"

ivory_term_count <- ivory_exports_data |>
  group_by(Year,Term) |>
  summarise(instance_count = n()) |>
  ungroup()

ivory_term_count <- ivory_term_count |>
  mutate(Term = fct_reorder(Term, instance_count, .desc = TRUE))

carving_ggplot <- ivory_term_count |>
  ggplot(aes( y = fct_rev(Term), size = instance_count, fill = Term)) +
  geom_bar(alpha = 0.7, color = "black") +
  scale_size(range = c(1.4, 10), name = "Population (M)") +
  scale_fill_carto_d(palette = "Safe") +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(
    x = "Count",
    y = "Export Type",
    title = "Type of ivory export",
    caption = "Source: CITES (Convention of International Trade 
    in Endangered Species of Wild Fauna and Flora)"
  )

# converting ggplot to plotly
carvings_plotly <- ggplotly(carving_ggplot, tooltip = "text")

# display the interactive plot
carvings_plotly
```


## Column {width="45%"}

```{r}

#|title: "Ivory exports from 1995 to 2022"

# Extracing data from ivory_exports dataset
country_export_count <- ivory_exports_data %>%
  filter(Exporter %in% c("ZW", "ZM", "ZA", "BW", "MZ")) %>%
  group_by(Exporter) %>%
  summarise(count = n()) %>%
  mutate(Country = case_when(
    Exporter == "ZW" ~ "Zimbabwe",
    Exporter == "ZM" ~ "Zambia",
    Exporter == "ZA" ~ "South Africa",
    Exporter == "BW" ~ "Botswana",
    Exporter == "MZ" ~ "Mozambique",
    TRUE ~ as.character(Exporter)
  ))

africa <- ne_countries(scale = "medium", continent = "Africa", returnclass = "sf")

export_country_map <- merge(africa, country_export_count, by.x = "name", by.y = "Country")

# Create a ggplot map
gg_export_countries <- ggplot() +
  geom_sf(data = africa, fill = "white") +
  geom_sf(data = export_country_map, aes(fill = count, text = paste("Country: ", country_export_count$Country,"<br>",  
    "Export count: ",count )), color = "#5D2606", size = 0.2) +
  scale_fill_gradient(low = "#F2A64F", high = "#B61210", name = "Export count") + 
  theme_void() +
  labs(title = "Ivory exports from 1995 to 2022 (Top 5 largest ecosystems)", 
       caption = "Source: CITES (Convention of International Trade in Endangered Species of Wild Fauna and Flora)")

# Convert ggplot to plotly
gg_export_countries_plotly <- ggplotly(gg_export_countries, tooltip = "text")

# Show the Plotly map
gg_export_countries_plotly
```

